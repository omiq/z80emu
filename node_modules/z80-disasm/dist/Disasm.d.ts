import { Instruction } from "./Instruction.js";
/**
 * Main class for disassembling a binary.
 */
export declare class Disasm {
    private readonly memory;
    private readonly readMemory;
    private readonly hasContent;
    private readonly isDecoded;
    private readonly instructions;
    private readonly knownLabels;
    /**
     * Addresses that might be jumped to when running the code.
     */
    private entryPoints;
    /**
     * Values that were loaded into a 16-bit register. We can't be sure that these were meant to be
     * addresses, but guess that they were if it helps make a nicer disassembly.
     */
    private referencedAddresses;
    /**
     * Map from an opcode (like 0xCF for RST 8) to the number of additional data bytes to gobble up.
     */
    private opcodeToAdditionDataLength;
    /**
     * Add a chunk of binary somewhere in memory.
     */
    addChunk(bin: ArrayLike<number>, address: number): void;
    /**
     * Add a memory location that might be jumped to when running this program. If no entry
     * points are specified, then the lower address for which we have binary will be used.
     */
    addEntryPoint(entryPoint: number): void;
    /**
     * Specify that this opcode (e.g., 0xCF) has this many bytes of additional data after it
     * that should not be interpreted as code.
     */
    addAdditionalDataLength(opcode: number, length: number): void;
    /**
     * Disassemble one instruction.
     *
     * @param address the address to disassemble.
     * @param readMemory function for reading a byte of memory at the specified address.
     */
    private disassembleOne;
    /**
     * Makes a data (.byte, .text) instruction starting at the specified address.
     */
    private makeDataInstruction;
    /**
     * Add a known label.
     *
     * @param address address of label.
     * @param label name to use for label.
     */
    addLabel(address: number, label: string): void;
    /**
     * Add an array of known label ([address, label] pairs).
     */
    addLabels(labels: [number, string][]): void;
    /**
     * Whether we have a label with this name. This is pretty slow currently, but is only used
     * where that doesn't matter. Speed up with a set later if necessary.
     */
    haveLabel(label: string): boolean;
    /**
     * Add the label or, if it's already there, add a suffix to make it unique.
     */
    addUniqueLabel(address: number, label: string): void;
    /**
     * Disassemble a single instruction for tracing. This is intended when tracing a live CPU and
     * we want to print the currently-executing instructions.
     */
    disassembleTrace(address: number, readMemory: (address: number) => number): Instruction;
    /**
     * Disassemble all instructions and assign labels.
     */
    disassemble(): Instruction[];
    private replaceTargetAddress;
    /**
     * Compute the number of additional data bytes there are after this instruction.
     */
    private getAdditionalDataLength;
}
//# sourceMappingURL=Disasm.d.ts.map