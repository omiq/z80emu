import { hi, lo, word } from "./Utils.js";
/**
 * All registers in a Z80.
 */
export class RegisterSet {
    constructor() {
        // External state:
        this.af = 0;
        this.bc = 0;
        this.de = 0;
        this.hl = 0;
        this.afPrime = 0;
        this.bcPrime = 0;
        this.dePrime = 0;
        this.hlPrime = 0;
        this.ix = 0;
        this.iy = 0;
        this.sp = 0;
        this.pc = 0;
        // Internal state:
        this.memptr = 0;
        this.i = 0;
        this.r = 0; // Low 7 bits of R.
        this.r7 = 0; // Bit 7 of R.
        this.iff1 = 0;
        this.iff2 = 0;
        this.im = 0;
        this.halted = 0;
    }
    get a() {
        return hi(this.af);
    }
    set a(value) {
        this.af = word(value, this.f);
    }
    get f() {
        return lo(this.af);
    }
    set f(value) {
        this.af = word(this.a, value);
    }
    get b() {
        return hi(this.bc);
    }
    set b(value) {
        this.bc = word(value, this.c);
    }
    get c() {
        return lo(this.bc);
    }
    set c(value) {
        this.bc = word(this.b, value);
    }
    get d() {
        return hi(this.de);
    }
    set d(value) {
        this.de = word(value, this.e);
    }
    get e() {
        return lo(this.de);
    }
    set e(value) {
        this.de = word(this.d, value);
    }
    get h() {
        return hi(this.hl);
    }
    set h(value) {
        this.hl = word(value, this.l);
    }
    get l() {
        return lo(this.hl);
    }
    set l(value) {
        this.hl = word(this.h, value);
    }
    get ixh() {
        return hi(this.ix);
    }
    set ixh(value) {
        this.ix = word(value, this.ixl);
    }
    get ixl() {
        return lo(this.ix);
    }
    set ixl(value) {
        this.ix = word(this.ixh, value);
    }
    get iyh() {
        return hi(this.iy);
    }
    set iyh(value) {
        this.iy = word(value, this.iyl);
    }
    get iyl() {
        return lo(this.iy);
    }
    set iyl(value) {
        this.iy = word(this.iyh, value);
    }
    /**
     * Combine the two R parts together.
     */
    get rCombined() {
        return (this.r7 & 0x80) | (this.r & 0xF7);
    }
    /**
     * Get a register by name.
     */
    getValue(registerName) {
        return this[registerName];
    }
}
/**
 * All real fields of RegisterSet, for enumeration.
 */
export const registerSetFields = [
    "af", "bc", "de", "hl",
    "afPrime", "bcPrime", "dePrime", "hlPrime",
    "ix", "iy", "sp", "pc",
    "memptr", "i", "r", "iff1", "iff2", "im", "halted"
];
//# sourceMappingURL=RegisterSet.js.map