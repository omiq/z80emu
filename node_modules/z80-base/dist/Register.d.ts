/**
 * All byte registers.
 */
declare const BYTE_REG_ARRAY: readonly ["a", "f", "b", "c", "d", "e", "h", "l", "ixh", "ixl", "iyh", "iyl", "i", "r"];
declare type ByteReg = typeof BYTE_REG_ARRAY[number];
/**
 * All word registers. Uses the "Prime" suffix instead of an apostrophe so that
 * this can be used as a field name for the RegisterSet class.
 */
declare const WORD_REG_ARRAY: readonly ["af", "bc", "de", "hl", "afPrime", "bcPrime", "dePrime", "hlPrime", "ix", "iy", "sp", "pc"];
declare type WordReg = typeof WORD_REG_ARRAY[number];
/**
 * All internal registers.
 */
declare const INTERNAL_REG_ARRAY: readonly ["memptr", "i", "r", "iff1", "iff2", "im", "halted"];
export declare type InternalReg = typeof INTERNAL_REG_ARRAY[number];
/**
 * All registers.
 */
export declare type Register = ByteReg | WordReg | InternalReg;
/**
 * Determine whether a register stores a word. The prime version should use an apostrophe, like hl'.
 */
export declare function isWordReg(s: string): boolean;
/**
 * Determine whether a register stores a byte.
 */
export declare function isByteReg(s: string): boolean;
/**
 * Whether the string can be used as a field of the RegisterSet structure, in its getValue() method.
 */
export declare function isRegisterSetField(s: string): s is Register;
export {};
//# sourceMappingURL=Register.d.ts.map