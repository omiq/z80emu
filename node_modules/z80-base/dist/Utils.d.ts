/**
 * Convert a number to hex and zero-pad to the specified number of hex digits.
 */
export declare function toHex(value: number, digits: number): string;
/**
 * Convert a byte to hex.
 */
export declare function toHexByte(value: number): string;
/**
 * Convert a word to hex.
 */
export declare function toHexWord(value: number): string;
/**
 * Convert a long (32-bit value) to hex.
 */
export declare function toHexLong(value: number): string;
/**
 * Return the high byte of a word.
 */
export declare function hi(value: number): number;
/**
 * Return the low byte of a word.
 */
export declare function lo(value: number): number;
/**
 * Create a word from a high and low byte.
 */
export declare function word(highByte: number, lowByte: number): number;
/**
 * Increment a byte.
 */
export declare function inc8(value: number): number;
/**
 * Increment a word.
 */
export declare function inc16(value: number): number;
/**
 * Decrement a byte.
 */
export declare function dec8(value: number): number;
/**
 * Decrement a word.
 */
export declare function dec16(value: number): number;
/**
 * Add two bytes together.
 */
export declare function add8(a: number, b: number): number;
/**
 * Add two words together.
 */
export declare function add16(a: number, b: number): number;
/**
 * Subtract two bytes.
 */
export declare function sub8(a: number, b: number): number;
/**
 * Subtract two words.
 */
export declare function sub16(a: number, b: number): number;
/**
 * Convert a byte to a signed number (e.g., 0xff to -1).
 */
export declare function signedByte(value: number): number;
//# sourceMappingURL=Utils.d.ts.map